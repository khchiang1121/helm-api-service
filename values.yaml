# Default values for api-service
# This is a YAML-formatted file.
#
# SECRETS AUTO-GENERATION:
# When secrets.create is set to true, the following fields will be automatically
# generated if left empty (""):
# - POSTGRES_PASSWORD: 32-character random alphanumeric password
# - DJANGO_SUPERUSER_PASSWORD: 32-character random alphanumeric password  
# - DJANGO_SECRET_KEY: 50-character random alphanumeric key
# - DJANGO_BACKDOOR_API_TOKEN: 32-character random alphanumeric token
# - ADMIN_PASSWORD: 32-character random alphanumeric password
#
# To use auto-generation, leave these fields empty in your values file.
# To use custom values, provide the actual passwords/keys.

# Global settings
global:
  # Global image registry
  imageRegistry: ""
  # Global image pull secrets
  imagePullSecrets: []
  # Global storage class
  storageClass: ""

# Application name and namespace
nameOverride: ""
fullnameOverride: ""

# Image configuration
image:
  registry: ""
  repository: khchiang1121/api-service
  tag: "latest"
  pullPolicy: IfNotPresent

# Image pull secrets
imagePullSecrets:
  - name: gitlab-registry-secret

# Service account configuration
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Pod annotations
podAnnotations: {}

# Rollout deployment when configmap changes
rolloutOnConfigmapChange:
  enabled: true

# Pod security context
podSecurityContext: {}
  # fsGroup: 2000

# Container security context
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  annotations: {}
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP

# Ingress configuration
ingress:
  enabled: false
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: api-service.your-domain.com
      paths:
        - path: /
          pathType: Prefix
    - host: api-service-dev.your-domain.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: api-service-tls
      hosts:
        - api-service.your-domain.com
        - api-service-dev.your-domain.com

# Deployment configuration
deployment:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%

# Resources configuration
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

# Horizontal Pod Autoscaler
hpa:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Autoscaling configuration (for backward compatibility)
autoscaling:
  enabled: false

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 2
  maxUnavailable: 1

# Health check configuration
healthCheck:
  livenessProbe:
    enabled: true
    path: /health/
    port: 8201
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    enabled: true
    path: /health/
    port: 8201
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Secrets configuration
# 
# AUTOMATIC SECRET GENERATION:
# When secrets.create is true and autoGenerate.enabled is true, any empty field ("")
# in secrets.data will be automatically generated with secure random values.
# 
# Three generation methods:
# 1. Simple: Leave field empty, uses default settings
# 2. Explicit: Define specific generation rules per field
# 3. Mixed: Combine default settings with field-specific rules
#
secrets:
  # Specifies whether a secret should be created
  create: false
  # Auto-generation configuration
  autoGenerate:
    # Enable automatic generation of empty secret values
    enabled: true
    # Default settings for simple auto-generation (Method 1)
    default:
      length: 32
      type: "alphanumeric"  # See supported types below
    # Explicit field configuration (Method 2) - optional
    fields: {}
      # Supported generation types:
      # 
      # Basic types:
      #   "alphanumeric"  - a-z, A-Z, 0-9 (Helm default)
      #   "alpha"         - a-z, A-Z (letters only)
      #   "numeric"       - 0-9 (numbers only)
      #   "mixed_case"    - a-z, A-Z, 0-9 (explicit mixed case)
      #
      # Hex types:
      #   "hex"           - 0-9, a-f (lowercase hex)
      #   "hex_upper"     - 0-9, A-F (uppercase hex)
      #
      # Special character types:
      #   "special"       - All printable ASCII characters (maximum security)
      #   "safe_special"  - Letters, numbers, safe symbols (!@#$%^&*-_=+)
      #
      # Encoding-safe types:
      #   "base64"        - a-z, A-Z, 0-9, +, / (Base64 compatible)
      #   "url_safe"      - a-z, A-Z, 0-9, -, _ (URL-safe characters)
      #
      # Example configurations:
      # my_database_password:
      #   length: 32
      #   type: "safe_special"     # D4g$aO&SJT@OaXpl...
      # jwt_signing_key:
      #   length: 128
      #   type: "hex"              # dc982a22bea17447...
      # api_token:
      #   length: 32
      #   type: "hex_upper"        # 23D14CAB3C050B5F...
      # simple_code:
      #   length: 6
      #   type: "numeric"          # 583649
      # url_token:
      #   length: 24
      #   type: "url_safe"         # dxGOYPsJJpi-qaAR...
      # secure_password:
      #   length: 64
      #   type: "special"          # MiT?2tDe%|ON5&u1...
      # mixed_password:
      #   length: 16
      #   type: "mixed_case"       # aEneazaCdapl8TJY
      # base64_key:
      #   length: 32
      #   type: "base64"           # iesThYPGmR5Mc5Ly...
      # alpha_name:
      #   length: 12
      #   type: "alpha"            # AlVsGbPTYJPM
  data: {}
    # Example: Any empty field will be auto-generated using default settings
    # my_database_password: ""        # Will generate 32-char alphanumeric
    # application_secret: ""          # Will generate 32-char alphanumeric
    # custom_api_key: ""              # Will generate 32-char alphanumeric
    
    # Example: Non-empty fields remain unchanged
    # database_host: "postgres"
    # database_port: "5432"
    # database_name: "myapp"
    # database_user: "admin"
    
    # Example: Mixed configuration
    # admin_username: "admin"
    # admin_email: "admin@example.com"
    # admin_password: ""              # Will be auto-generated

vaultSecret:
  create: false
  spec:
    path: "secret/prod/api-service"
    type: Opaque
    keys: []
    isBinary: false
    reconcileStrategy: ""
    templates: {}

# ConfigMap configuration
configMap:
  create: false
  data: {}
    # PGAdmin settings
    # PGADMIN_CONFIG_SERVER_MODE: "True"

    # # Django settings
    # DJANGO_SETTINGS_MODULE: "inventory.settings"
    # DJANGO_DEBUG: "False"
    # DJANGO_ALLOWED_HOSTS: "*"
    # DJANGO_CSRF_TRUSTED_ORIGINS: "*"
    
    # # Application settings
    # DJANGO_APP_PORT: ""
    # DJANGO_WORKERS: ""

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Additional volumes
volumes: []
# - name: config-volume
#   configMap:
#     name: {{ include "api-service.fullname" . }}-config

# Additional volume mounts
volumeMounts: []
# - name: config-volume
#   mountPath: /app/config

# Init containers
initContainers: []

# Sidecar containers
sidecars: []

# Network policy
# Custom network policy
networkPolicy:
  enabled: true
  namespace: "api-service-gateway"
  ingressRules:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-traefik
      - podSelector:
          matchLabels:
            app: monitoring
      - ipBlock:
          cidr: 10.0.0.0/8
  egressRules: []

# Service monitor for Prometheus
serviceMonitor:
  enabled: false
  namespace: ""
  interval: 30s
  scrapeTimeout: 10s
  path: /metrics
  port: http
  # Namespace selector configuration
  namespaceSelector:
    # Whether to enable namespace selector (allows monitoring across namespaces)
    enabled: false
    # Use default namespace (current release namespace) - set to true for simple setup
    useDefault: true
    # Custom namespace selector configuration (only used when useDefault is false)
    # You can use either matchNames or matchLabels
    config:
      # Example 1: Monitor specific namespaces by name
      matchNames:
        - default
        - monitoring
        - production
      # Example 2: Monitor namespaces with specific labels (uncomment to use)
      # matchLabels:
      #   environment: production
      #   monitoring: enabled

# Pod security policy
podSecurityPolicy:
  enabled: false
  annotations: {}
  privileged: false
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 2000
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'

# # Istio Gateway configuration
istio:
  gateway:
    enabled: false
    namespace: "api-service-gateway"
    selector:
      istio: ingressgateway
    # hosts:
    #   - "api.example.com"
    #   - "api-service-dev.your-domain.com"
    servers:
      - port:
          number: 80
          name: http
          protocol: HTTP
        hosts:
          - "api.example.com"
        tls:
          httpsRedirect: true
      - port:
          number: 443
          name: https
          protocol: HTTPS
        hosts:
          - "api.example.com"
        tls:
          mode: SIMPLE
          credentialName: wildcard-example-com
      - port:
          number: 15443
          name: tls-passthrough
          protocol: TLS
        hosts:
          - "mtls.example.com"
        tls:
          mode: PASSTHROUGH

  virtualService:
    enabled: false
    name: "api-service-vs"
    hosts:
      - "api-service.your-domain.com"
      - "api-service-dev.your-domain.com"
    gateways:
      - "istio-system/api-service-gateway"
    http:
      - match:
          - uri:
              prefix: "/"
        route:
          - destination:
              host: "api-service"
              port:
                number: 80
        timeout: 60s
        retries:
          attempts: 3
          perTryTimeout: 20s

# cert-manager Certificate configuration
certificate:
  enabled: false
  name: "api-service-tls-cert"
  namespace: "istio-system"
  secretName: "api-service-tls-cert"
  issuerRef:
    name: "letsencrypt-prod"
    kind: "ClusterIssuer"
  privateKey:
    size: 4096
  dnsNames:
    - "api-service.your-domain.com"
    - "api-service-dev.your-domain.com"
  commonName: "api-service.your-domain.com"
  usages:
    - digital signature
    - key encipherment 
